/*Problem

Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].*/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    unordered_map<int,int> numsMap;
    for(int i=0;i<nums.size();i++)
    {
        numsMap.insert({nums[i],i});
    }
    unordered_map<int,int>::iterator iterMap;
    for(int j=0;j<nums.size();j++)
    {
        iterMap=numsMap.find((target-nums[j]));
        if(iterMap!=numsMap.end()&&iterMap->second!=j)
        {
            vector<int> indice;
            indice.push_back(j);
            indice.push_back(iterMap->second);
            return indice;
        }
    }
    }
};
